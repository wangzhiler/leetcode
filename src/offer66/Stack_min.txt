/*

定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））

*/

import java.util.Stack;

public class Solution {

    //普通栈
    Stack<Integer> stack1=new Stack<>();
    //放最小的进去
    Stack<Integer> stack2=new Stack<>();


    //如果2为空/新来的更小放进2，不然把2上次放进来的再放一遍
    public void push(int node) {
        stack1.push(node);
        if( stack2.empty()||node<=stack2.peek()){
            stack2.push(node);
        }else{
            stack2.push(stack2.peek());
        }
    }

    //pop两个都要出来
    public void pop() {
        stack1.pop();
        stack2.pop();
    }

    public int top() {
        return stack1.peek();
    }

    public int min() {
        return stack2.peek();
    }
}