Description
Given a binary search tree (See Definition) and a node in it
, find the in-order successor of that node in the BST.
If the given node has no in-order successor in the tree, return null.

Example
Given tree = [2,1] and node = 1:

  2
 /
1
return node 2.

Given tree = [2,1,3] and node = 2:

  2
 / \
1   3
return node 3.

Challenge
O(h), where h is the height of the BST.

思路：
0. p是最大结点，返回null
1. p有右子树，同有parent域的情况1
2. p没有右子树，查找到结点p，并将路径压栈，弹栈回溯的算法与有parent域的情况2类似

用临时变量代替栈，当遇到"递归查找左子树",更新临时变量
时间O(logN) 空间O(1)

public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
    // write your code here
    if (p == null) {
        return null;
    }
    //最右的结点
    if (getLastEntry(root) == p) {
        return null;
    }
    //有右子树的情况，返回右孩子的最小结点
    if (p.right != null) {
        return getFirstEntry(p.right);
    }
    //没右子树，记录查找key的过程
    TreeNode parent = root;
    TreeNode temp = root;
    while (parent != null) {
        if (parent == p) {
            break;
        } else if (p.val < parent.val) {
            temp = parent;
            parent = parent.left;
        } else {
            parent = parent.right;
        }
    }
    return temp;
}

private TreeNode getLastEntry(TreeNode p) {
    while (p.right != null) {
        p = p.right;
    }
    return p;
}

private TreeNode getFirstEntry(TreeNode p) {
    while (p.left != null) {
        p = p.left;
    }
    return p;
}













