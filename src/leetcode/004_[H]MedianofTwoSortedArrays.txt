There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5


Solution:
time: O(log(min(m,n)))
space: O(1)


index:  0   1   2   3   4   5
            L1  R1
num1:   3   5 | 8   9           4 cut1:代表左边有几个元素
num2:   1   2   7 | 10  11  12  6 cut2:代表左边有几个元素
                L2  R2
num3:   1   2   3   5   7 | 8   9   10  11  12

num3-> num1+num2 ->num1

L1<=R2
L2<=R1

L1>R2 cut1<< (cutL, cut1-1)
L2>R1 cut2>> (cut1+1, cutR)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //只对一个数组进行二分操作即可，则选择更小的数组
        if(nums1.length>nums2.length){
            return findMedianSortedArrays(nums2, nums1);
        }

        int len=nums1.length+nums2.length;
        int cut1=0;
        int cut2=0;
        int cutL=0;
        int cutR=nums1.length;

        while(cut1<=nums1.length){
            //二分
            cut1=(cutR-cutL)/2+cutL;
            cut2=len/2-cut1;

            double L1=(cut1==0)?Integer.MIN_VALUE:nums1[cut1-1];
            double L2=(cut2==0)?Integer.MIN_VALUE:nums2[cut2-1];
            double R1=(cut1==0)?Integer.MAX_VALUE:nums1[cut1];
            double R2=(cut2==0)?Integer.MAX_VALUE:nums2[cut2];

            if(L1>R2){
                cutR=cut1-1;
            }else if(L2>R1){
                cutL=cut1+1;
            }else{
                //处理奇偶问题
                if(len%2==0){
                    //取L1L2中的最大值,R1R2中的最小值
                    L1=L1>L2?L1:L2;
                    R1=R1<R2?R1:R2;
                    return (L1+R1)/2;
                }else{
                    R1=(R1<R2)?R1:R2;
                    return R1;
                }
            }
        }
        return -1;
    }
}



public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //取更小的数组进行二分操作
        int m = nums1.length, n = nums2.length;
        if (m < n) return findMedianSortedArrays(nums2, nums1);
        if (n == 0) return (nums1[(m - 1) / 2] + nums1[m / 2]) / 2.0;
        int left = 0, right = 2 * n;
        while (left <= right) {
            int mid2 = (left + right) / 2;
            int mid1 = m + n - mid2;
            double L1 = mid1 == 0 ? Double.MIN_VALUE : nums1[(mid1 - 1) / 2];
            double L2 = mid2 == 0 ? Double.MIN_VALUE : nums2[(mid2 - 1) / 2];
            double R1 = mid1 == m * 2 ? Double.MAX_VALUE : nums1[mid1 / 2];
            double R2 = mid2 == n * 2 ? Double.MAX_VALUE : nums2[mid2 / 2];
            if (L1 > R2) left = mid2 + 1;
            else if (L2 > R1) right = mid2 - 1;
            else return (Math.max(L1, L2) + Math.min(R1, R2)) / 2;
        }
        return -1;
    }
}
















