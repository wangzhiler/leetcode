Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
Example 1:
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.

Example 2:
Input: "cbbd"
Output: "bb"

【PalindromicSubstrings.java】


Solution1: dp  【time:O(n^2)  space:O(n^2)】
j=2     j
    b a b a d
i=0 i

j=3       j
    b a b a d
i=1   i

public String longestPalindrome(String s) {
    if(s==null||s.length()==0) return s;
    String res = "";
    boolean[][] dp = new boolean[s.length()][s.length()];
    int max = 0;
    for (int j = 0; j < s.length(); j++) {
        for (int i = 0; i <= j; i++) {
            dp[i][j] = s.charAt(i) == s.charAt(j) && ((j - i <= 2) || dp[i + 1][j - 1]);
            if (dp[i][j]) {
                if (j - i + 1 > max) {
                    max = j - i + 1;
                    res = s.substring(i, j + 1);
                }
            }
        }

    }
    return res;
}



Solution2: 中心扩散法    【time:O(n^2)  space:O(1)】


String res = "";
    //中心扩散法
    // time:O(n^2)  space:O(1)
    public String longestPalindrome2(String s) {
        if(s==null||s.length()==0) return s;

        for (int i = 0; i < s.length(); i++) {
            helper(s, i, i);
            helper(s, i, i + 1);
        }

        return res;
    }

    public void helper(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        //substring方法包括开始，不包括结束
        String cur = s.substring(left + 1, right);
        if (cur.length() > res.length()) {
            res = cur;
        }
    }















