Given a linked list, swap every two adjacent nodes and return its head.

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.
Note:

Your algorithm should use only constant extra space.
You may not modify the values in the list's nodes, only nodes itself may be changed.


Solution:
【time:O(n)  space:O(1)】


public ListNode swapPairs(ListNode head) {
    if(head==null||head.next==null) return head;
    ListNode dummy = new ListNode(0);
    dummy.next = head;
    ListNode l1 = dummy;
    ListNode l2 = head;
    /*
          l2
     l1-> 1 -> 2 -> 3 -> 4
     l1 -> 2 -> 3 -> 4
            l2
     */
    while (l2 != null && l2.next != null) {
        l1.next = l2.next;
        l2.next = l2.next.next;
        l1.next.next = l2;
        l1 = l2;
        l2 = l1.next;
    }
    return dummy.next;
}













